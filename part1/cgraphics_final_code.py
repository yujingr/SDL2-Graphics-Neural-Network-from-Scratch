# -*- coding: utf-8 -*-
"""CGraphics Final Code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PQQ0h0_G4oKSac6-Smjso9w-Aa-nJcYc

## Converts png to PPM
"""

#@title Converts png to PPM
from PIL import Image
def convert_ppm3(filename, tofilename):

    im = Image.open(filename) # Can be many different formats.
    pix = im.load()
    print(im.size)  # Get the width and hight of the image for iterating over
    f = open(tofilename, "w")
    f.write("P3\n{} {}\n255\n".format(im.size[0],im.size[1]))
    for x in range(im.size[0]):
        for y in range(im.size[1]):
            rgba = pix[im.size[0]-y-1,x];
            f.write("{}\n{}\n{}\n".format(rgba[0],rgba[1],rgba[2]))
    f.close()

for i in range(10):
    filename = "{}.png".format(i)
    tofilename= "{}.ppm".format(i)
    convert_ppm3(filename, tofilename)

im = Image.open(filename) # Can be many different formats.
pix = im.load()
print(im.size)  # Get the width and hight of the image for iterating over
f = open(tofilename, "w")
f.write("P3\n{}\n{}\n255\n".format(im.size[0],im.size[1]))
for x in range(im.size[0]):
    for y in range(im.size[1]):
        rgba = pix[y,x];
        f.write("{}\n{}\n{}\n".format(rgba[0],rgba[1],rgba[2]))
f.close()

"""## Neural Network Model"""

#@title 1. Setup
import numpy as np
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import cv2 as cv

# Seed
SEED = 111
np.random.seed(seed=SEED)
tf.random.set_seed(SEED)

#@title 2. Dense Model Binary data
x_train_resize = []
x_test_resize = []

num_classes = 10
input_shape = (10*10)

(x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()
y_train = keras.utils.to_categorical(y_train, num_classes)
y_test = keras.utils.to_categorical(y_test, num_classes)

for i,image in enumerate(x_train):
    image = cv.resize(image, (10,10))
    image = image > 0
    image = image.astype(dtype="int")
    x_train_resize.append(image)
for i, image in enumerate(x_test):
    image = cv.resize(image, (10,10))
    image = image > 0
    image = image.astype(dtype="int")
    x_test_resize.append(image)

x_train_resize = np.asarray(x_train_resize)
x_train_resize = x_train_resize.reshape(60000,10*10)
x_test_resize= np.asarray(x_test_resize)
x_test_resize = x_test_resize.reshape(10000,10*10)

#@title 3. Dense Model Init
nnn = 10 #30
model = keras.Sequential(
    [
        keras.Input(shape=input_shape),
        layers.Dense(nnn,activation="relu"),
        layers.Dense(nnn,activation="relu"),
        layers.Dense(nnn,activation="relu"),
        layers.Dense(num_classes, activation="softmax"),
    ]
)

model.summary()

#@title 4. dense model compile
batch_size = 128
epochs = 30
op = keras.optimizers.SGD(learning_rate = 0.1, momentum = 0.9)
op = keras.optimizers.Adam(learning_rate = 0.05)
model.compile(loss="categorical_crossentropy", optimizer="adam", metrics=["accuracy"])
#model.compile(loss="categorical_crossentropy", optimizer=op, metrics=["accuracy"])

model.fit(x_train_resize, y_train, batch_size=batch_size, epochs=epochs, validation_split=0.1)

model.predict(np.array([x_train_resize[1000],]))

#@ title 5. Output the weights
#https://numpy.org/doc/stable/reference/generated/numpy.savetxt.html
np.savetxt('test0w.txt', model.layers[0].get_weights()[0], delimiter=',',newline=',\n')
np.savetxt('test0b.txt', model.layers[0].get_weights()[1], delimiter=',',newline=',\n')
np.savetxt('test1w.txt', model.layers[1].get_weights()[0], delimiter=',',newline=',\n')
np.savetxt('test1b.txt', model.layers[1].get_weights()[1], delimiter=',',newline=',\n')
np.savetxt('test2w.txt', model.layers[2].get_weights()[0], delimiter=',',newline=',\n')
np.savetxt('test2b.txt', model.layers[2].get_weights()[1], delimiter=',',newline=',\n')
np.savetxt('test3w.txt', model.layers[3].get_weights()[0], delimiter=',',newline=',\n')
np.savetxt('test3b.txt', model.layers[3].get_weights()[1], delimiter=',',newline=',\n')